<?xml version="1.0"?>
<!--    =============================================================   -->
<!--    TIBET Automation module file                                     -->
<!--    =============================================================   -->

<!--
-->
<package xmlns="http://www.technicalpursuit.com/1999/tibet"
    name="tibet_automation" default="base" basedir="~tibet_src/">

<config id="base" depends="">
    <config ref="gui"/>
</config>

<config id="full" depends="base">
    <config ref="gui"/>
    <config ref="tsh"/>
</config>

<config id="gui" depends="">
    <script>
    if (TP.sys.cfg('boot.context') !== 'headless') {
    (function() {
    </script>
    <config ref="syn"/>
    <script>
    }());
    }
    </script>
    <script src="automation/TP.test.GUIDriver.js" />
</config>

<config id="syn">

    <script>
        <![CDATA[
        //  Because our automation system uses Promises in conjunction with Syn,
        //  we have to define an alternate version of Syn's 'schedule' call that
        //  knows that synchronization of all behavior is handled by our
        //  internal Promise code. Therefore, here we just invoke the function.
        //  Note that this is how you provide global options to Syn - by
        //  defining a global 'syn' object that it will pull from before
        //  reassigning itself to that global slot. So we *must* do this
        //  *before* Syn loads, which is why we do this here. Strange, but it's
        //  just how Syn works.
        syn = {
            'schedule' :
                function (fn, ms) {
                return fn();
                }
            };
        ]]>
    </script>

    <script src="~lib_deps/syn-tpi.js" no-lint="no-lint" />

    <script>
        <![CDATA[
        TP.registerExternalObject('syn', window.syn);
        ]]>
    </script>
</config>

<config id="tsh" depends="">
    <script src="automation/TP.test.TSHDriver.js" />
    <script src="automation/TP.test.TSHTestCmd.js" />
</config>

</package>

