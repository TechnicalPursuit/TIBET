<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">

<head>

	<title></title>

    <script src="../lib/src/tibet_hook.min.js"></script>

    <link type="text/css" rel="stylesheet" href="~lib_styles/tibet.css"/>

    <link type="text/css" rel="stylesheet" href="tibet_demos.css"/>

</head>

<body xmlns:bind="http://www.technicalpursuit.com/2005/binding">

	<h2>CouchDB Football Results</h2><br/>
	<br/>

    <button on:click="{signal: UIActivate, origin:'loadProvider'}">Refresh it!</button>
    <button on:click="{signal: UIActivate, origin:'saveProvider'}">Save it!</button>
	<br/>

    Auto-refresh: <input type="checkbox" bind:io="{checked: tibet://uicanvas#loadProvider@autorefresh}"/>
	<br/>

    Fetch status code: <span bind:in="{value: tibet://uicanvas#loadProvider@statuscode}"/>
	<br/>
    Fetch status text: <span bind:in="{value: tibet://uicanvas#loadProvider@statustext}"/>

	<br/>
    <br/>

    <!-- Set up a 'bind:scope' that points to the URN holding the query results.
         This URN is populated by the load <service/> tag below. Note how this
         uses standard W3C XPointer notation, but with an empty scheme. It's
         easiest to think of this full scope URN being populated into each of
         the 'bind:' attributes below -->
    <span bind:scope="urn:tibet:footballData#tibet()">

        <!-- This binds the 'value' of the <span/> into a path into the JSON
             data -->
        Estimated Result Count: <span bind:in="{value: responseData.cursor.estimatedResultCount}"/>

        <table>
            <thead>
                <tr>
                    <th>Unescaped URL</th>
                    <th>Title</th>
                    <th>Content</th>
                </tr>
            </thead>
            <!-- 'bind:repeat' causes an iteration to happen over a collection
                 of data. In this case, there is a template nested under the
                 element with the bind:repeat attribute that will pluck each
                 named field out of each record as it iterates. Note also the
                 'on:dbclick' attribute that fires a 'UIEdit' signal. This
                 configures "double click to edit" behavior. -->
            <tbody id="people" bind:repeat="responseData.results" on:dblclick="UIEdit">
                <tr>
                    <td>[[unescapedUrl]]</td>
                    <td>[[titleNoFormatting]]</td>
                    <td>[[content]]</td>
                </tr>
            </tbody>
        </table>
    </span>

    <!-- Set up <service/> tags that represent the CouchDB 'optum/football_info'
         endpoints, one for load and the other for save. Note here how results
         are placed into the 'urn:tibet:footballData' data holder. -->

    <tibet:service id="loadProvider"
                href="http://127.0.0.1:5984/optum/football_info"
                name="urn:tibet:footballData"/>

    <tibet:service id="saveProvider"
                href="http://127.0.0.1:5984/optum/football_info"
                body="urn:tibet:footballData"
                method="PUT"
                mimetype="application/json"/>

</body>
</html>
