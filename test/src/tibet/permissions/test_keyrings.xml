<?xml version="1.0"?>
<keyrings>

    <!--
    A file of sample keyring entries, similar to those you might leverage as
    part of TIBET's TP.core.User type and its org/unit/role permission model.

    When a TP.core.Unit or TP.core.Role type is loaded it will typically assign
    one or more keyrings during the type initialize method. For example, the
    TP.core.Role type automatically assigns the keyring named "guest" as a
    default set of keys all users will acquire.

    NOTE that in these entries we show a few examples of defining a keyring as
    containing one or more keys as well as one or more nested keyrings. This
    hopefully shows how you can avoid repeating blocks of permissions across
    different keyrings by placing common keys into "sub rings" that you assign
    to the more publicly visible keyrings.

    We also show an example of a "precompiled" set of keys, effectively a
    keyring element with a keys attribute containing the keys rather than child
    content. This is a more compact form that TIBET leverages both as a cacheing
    value and as a shorthand format.
    -->

    <!--  role-focused -->

    <keyring id="guest">
        <key name="R" desc="read"/>
    </keyring>

    <keyring id="administrator">
        <key name="C" desc="create"/>
        <key name="R" desc="read"/>
        <key name="U" desc="update"/>
        <key name="D" desc="delete"/>
    </keyring>

    <keyring id="developer">
        <keyring ref="development"/>
        <key name="B" desc="build"/>
    </keyring>

    <keyring id="qualitycontrol">
        <keyring ref="development"/>
    </keyring>

    <keyring id="user">
        <key name="R" desc="read"/>
    </keyring>

    <!--  unit-focused -->

    <keyring id="development">
        <keyring ref="administrator"/>
        <key name="T" desc="test"/>
    </keyring>

    <keyring id="operations">
      <keyring ref="administrator"/>
    </keyring>

    <keyring id="public">
      <key name="R" desc="read"/>
    </keyring>

    <!--
    A "precompiled" keyring, avoiding computation of nested key values. This is
    a good format to use when leveraging a web service to acquire keyrings by ID
    since it avoids space and computation overhead (at the expense of a little
    maintainability).
    -->
    <keyring id="staff" keys="C R U"/>

</keyrings>

