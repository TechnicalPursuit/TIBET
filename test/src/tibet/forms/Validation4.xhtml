<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml"
        xmlns:tibet="http://www.technicalpursuit.com/1999/tibet">

<head>

    <title></title>

    <script src="~lib_build/tibet_hook.min.js"></script>

    <link type="text/css" rel="stylesheet" href="~lib_styles/tibet.css"/>

    <style type="text/css">
    <![CDATA[
    @namespace pclass url(urn:tibet:pseudoclass);

    /*input[type=text]:invalid*/
    input[type=text][pclass|invalid]
    {
        color: red;
    }
    ]]>
    </style>

    <tibet:data id="Validation4Data" name="urn:tibet:Validation4_person" resultType="TP.test.BaseMarkupEmployee">
        <person xmlns="">
            <lastname>Smith</lastname>
            <firstname>Joe</firstname>
            <age>48</age>
            <address>
                <street_address>111 Main St.</street_address>
                <city>Anytown</city>
                <state>Foo</state>
            </address>
            <gender>male</gender>
            <uscitizen/>
            <SSN></SSN>
        </person>
    </tibet:data>

</head>

<body>

    <h2>Validation Test #4</h2><br/>

    <br/>
    <br/>
    This test sets up multiple XHTML elements, all bound to an underlying data model defined in the test code. They are all 'input type="text"' elements, some wrapped in a 'tibet:group' element and some wrapped in a 'tibet:group' subgroup element of that element. These groups elements have an 'invalidwhen="any"' attribute, which means that they are considered to be invalid when any of the fields (which are members of their group) are invalid. This 'validity' property of the underlying data model is modeled in the code. The attendant data types are also defined in the code.
    <br/>
    <br/>
    The value of the third element is valid, so nothing more needs to be done. The test code sets a value on the fourth element, which causes the bound data value to change and for the 'validity' of the text field to change. The text field changes its appearance based on that fact and the nested 'tibet:group' element also changes itself to the valid state because both of its members are now valid. Note that the top-level group is still considered invalid because the second field is still invalid.
    <br/>
    <br/>
    The value of the first element is valid, so nothing more needs to be done. The test code sets a value on the second element, which causes the bound data value to change and for the 'validity' of the text field to change. The text field changes its appearance based on that fact and the top-level'tibet:group' element also changes itself to the valid state because all of its members, nested and non-nested, are now valid.
    <br/>
    <br/>
    A variety of signals are thrown by the various objects involved.
    <br/>

    <tibet:group id="EmployeeGroup" invalidwhen="any">
        <label for="GenderField">Gender: </label>
        <input type="text" id="GenderField" bind:io="{value: urn:tibet:Validation4_person#tibet(gender)}" tabindex="0"/><br/>

        <label for="uscitizenField">U.S. Citizen?: </label>
        <input type="checkbox" id="uscitizenCheckbox" bind:io="{checked: urn:tibet:Validation4_person#tibet(uscitizen)}" tabindex="0"/><br/>

        <label for="SSNField">SSN: </label>
        <input type="text" id="SSNField" bind:io="{value: urn:tibet:Validation4_person#tibet(SSN)}" tabindex="0"/><br/>

        <tibet:group id="AddressGroup" invalidwhen="any">

            <input type="text" id="CityField" bind:io="{value: urn:tibet:Validation4_person#tibet(city)}" tabindex="0"/><br/>

            <input type="text" id="StateField" bind:io="{value: urn:tibet:Validation4_person#tibet(state)}" tabindex="0"/><br/>
        </tibet:group>

    </tibet:group>

</body>
</html>
